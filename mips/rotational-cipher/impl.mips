# - read input string from a0
# - read shift key from a1
# - write a zero-terminated string representing the return value to address given in a2

.globl rotate

rotate:
	move 	$t0, $a0	# $t0 will increment as we step through the input
	move	$t9, $a2	# $t9 will increment as we step through the output
	
loop:
	lb	$t2, 0($t0)
	addi	$t0, $t0, 1
	beqz	$t2, done	# end of input
	
	sgeu	$t4, $t2, 0x61	# >= 'a'
	sleu	$t5, $t2, 0x7A	# <= 'z'
	and	$t6, $t4, $t5
	bnez	$t6, lowercase
	
	sgeu	$t4, $t2, 0x41	# >= 'A'
	sleu	$t5, $t2, 0x5A	# <= 'Z'
	and	$t6, $t4, $t5
	bnez	$t6, uppercase
	
punctuation:
	move	$t3, $t2
	j	store
	
lowercase:
	add	$t3, $t2, $a1
	
	# do we need to wrap the alphabet?
	sgtu	$t4, $t3, 0x7A	# > 'z'
	beqz	$t4, store 
	addi	$t3, $t3, -26	# wrap alphabet
	j	store

uppercase:
	add	$t3, $t2, $a1
	
	# do we need to wrap the alphabet?
	sgtu	$t4, $t3, 0x5A	# >= 'Z'
	beqz	$t4, store 
	addi	$t3, $t3, -26	# wrap alphabet
	
store:
	sb	$t3, 0($t9)	# write modified char to stack
	
next:
	addi	$t9, $t9, 1	# increment stack pointer
	j	loop
	
done:
	sb	$zero, 0($t9)	# add nul string terminator
	jr	$ra
